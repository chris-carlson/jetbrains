[
  {
    "name": "and",
    "description": "and condition",
    "value": "$CONDITION1$ && $CONDITION2$",
    "variables": [
      {
        "name": "CONDITION1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "CONDITION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ase",
    "description": "assertEquals statement",
    "value": "assertEquals($EXPECTED$, $ACTUAL$);",
    "variables": [
      {
        "name": "EXPECTED",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "ACTUAL",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "asf",
    "description": "assertFalse statement",
    "value": "assertFalse($EXPRESSION$);",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ast",
    "description": "assertTrue statement",
    "value": "assertTrue($EXPRESSION$);",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "bc",
    "description": "block comment",
    "value": "/*\n$END$\n*/",
    "variables": []
  },
  {
    "name": "brack",
    "description": "surround with brackets",
    "value": "<$SELECTION$>",
    "variables": []
  },
  {
    "name": "case",
    "description": "case statement",
    "value": "case $VALUE$:\n\t$END$\n\tbreak;",
    "variables": [
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "casef",
    "description": "case statement with fall-through",
    "value": "case $VALUE$:\n\t$END$",
    "variables": [
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "caser",
    "description": "case statement with return",
    "value": "case $VALUE$:\n\treturn $EXPRESSION$;",
    "variables": [
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "con",
    "description": "constructor",
    "value": "public $NAME$($PARAMETERS$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "NAME",
        "expression": "className()",
        "default_value": "",
        "always_stop": false
      },
      {
        "name": "PARAMETERS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "conp",
    "description": "private constructor",
    "value": "private $NAME$() {\n}",
    "variables": [
      {
        "name": "NAME",
        "expression": "className()",
        "default_value": "",
        "always_stop": false
      }
    ]
  },
  {
    "name": "const",
    "description": "constant initialization",
    "value": "$MODIFIER$ static final $TYPE$ $NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "MODIFIER",
        "expression": "",
        "default_value": "\"public\"",
        "always_stop": true
      },
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "eq",
    "description": "double equals check",
    "value": "$EXPRESSION1$ == $EXPRESSION2$",
    "variables": [
      {
        "name": "EXPRESSION1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "eqn",
    "description": "equals null",
    "value": "$EXPRESSION$ == null",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "eqs",
    "description": "equality check",
    "value": "$EXPRESSION1$.equals($EXPRESSION2$)",
    "variables": [
      {
        "name": "EXPRESSION1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "for",
    "description": "for statement",
    "value": "for (int $VARIABLE$ = 0; $VARIABLE$ < $LIMIT$; $VARIABLE$++) {\n\t$END$\n}",
    "variables": [
      {
        "name": "VARIABLE",
        "expression": "",
        "default_value": "\"i\"",
        "always_stop": true
      },
      {
        "name": "LIMIT",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "fore",
    "description": "for each statement",
    "value": "for ($TYPE$ $ITEM$ : $COLLECTION$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "ITEM",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "COLLECTION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "if",
    "description": "if statement",
    "value": "if ($CONDITION$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "CONDITION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ife",
    "description": "if else statement",
    "value": "if ($CONDITION$) {\n\t$BODY1$\n} else {\n\t$BODY2$\n}",
    "variables": [
      {
        "name": "CONDITION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "BODY1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "BODY2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "inst",
    "description": "JUnit instance variable declaration",
    "value": "private $TYPE$ instance;",
    "variables": [
      {
        "name": "TYPE",
        "expression": "substringBefore(className(), \"Test\")",
        "default_value": "",
        "always_stop": false
      }
    ]
  },
  {
    "name": "lamb",
    "description": "lambda function",
    "value": "$VARIABLE$ -> $EXPRESSION$",
    "variables": [
      {
        "name": "VARIABLE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "list",
    "description": "list initialization",
    "value": "java.util.List<$TYPE$> $NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "\"new java.util.ArrayList<>()\"",
        "always_stop": true
      }
    ]
  },
  {
    "name": "map",
    "description": "map initialization",
    "value": "java.util.Map<$TYPE1$, $TYPE2$> $NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "TYPE1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "TYPE2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "\"new java.util.HashMap<>()\"",
        "always_stop": true
      }
    ]
  },
  {
    "name": "meth",
    "description": "method declaration",
    "value": "$MODIFIER$ $TYPE$ $NAME$($PARAMETERS$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "MODIFIER",
        "expression": "",
        "default_value": "\"public\"",
        "always_stop": true
      },
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "\"void\"",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "PARAMETERS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "meths",
    "description": "static method declaration",
    "value": "$MODIFIER$ static $TYPE$ $NAME$($PARAMETERS$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "MODIFIER",
        "expression": "",
        "default_value": "\"public\"",
        "always_stop": true
      },
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "\"void\"",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "PARAMETERS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "mock",
    "description": "mock class",
    "value": "$TYPE$ $NAME$ = org.mockito.Mockito.mock($TYPE$.class);",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ne",
    "description": "negative double equals check",
    "value": "$EXPRESSION1$ != $EXPRESSION2$",
    "variables": [
      {
        "name": "EXPRESSION1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "nen",
    "description": "not equals null",
    "value": "$EXPRESSION$ != null",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "new",
    "description": "class initialization",
    "value": "new $CLASS$($PARAMETERS$)",
    "variables": [
      {
        "name": "CLASS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "PARAMETERS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "opt",
    "description": "surround with optional",
    "value": "java.util.Optional<$SELECTION$>",
    "variables": []
  },
  {
    "name": "or",
    "description": "or condition",
    "value": "$CONDITION1$ || $CONDITION2$",
    "variables": [
      {
        "name": "CONDITION1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "CONDITION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "par",
    "description": "parameter",
    "value": "$TYPE$ $NAME$",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "paren",
    "description": "surround with parentheses",
    "value": "($SELECTION$)",
    "variables": []
  },
  {
    "name": "quo",
    "description": "surround with quotes",
    "value": "\"$SELECTION$\"",
    "variables": []
  },
  {
    "name": "ret",
    "description": "return statement",
    "value": "return $EXPRESSION$;",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "set",
    "description": "set initialization",
    "value": "java.util.Set<$TYPE$> $NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "\"new java.util.HashSet<>()\"",
        "always_stop": true
      }
    ]
  },
  {
    "name": "switch",
    "description": "switch statement",
    "value": "switch ($CONDITION$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "CONDITION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "sys",
    "description": "print statement",
    "value": "System.out.println($EXPRESSION$);",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "sysm",
    "description": "print statement with message",
    "value": "System.out.println(\"$MESSAGE$\");",
    "variables": [
      {
        "name": "MESSAGE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "sysv",
    "description": "variable print statement",
    "value": "System.out.println(\"$EXPRESSION1$: \" + $EXPRESSION2$);",
    "variables": [
      {
        "name": "EXPRESSION2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXPRESSION1",
        "expression": "",
        "default_value": "EXPRESSION2",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ter",
    "description": "ternary expression",
    "value": "$EXPRESSION$ ? $VALUE1$ : $VALUE2$",
    "variables": [
      {
        "name": "EXPRESSION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE1",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "th",
    "description": "this",
    "value": "this.",
    "variables": []
  },
  {
    "name": "throw",
    "description": "throw exception",
    "value": "throw new $EXCEPTION$(\"$MESSAGE$\");",
    "variables": [
      {
        "name": "EXCEPTION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "MESSAGE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "try",
    "description": "try/catch statement",
    "value": "try {\n\t$TRY$\n} catch ($EXCEPTION$ exception) {\n\t$CATCH$\n}",
    "variables": [
      {
        "name": "TRY",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "EXCEPTION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "CATCH",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "vara",
    "description": "variable assignment",
    "value": "$NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "varc",
    "description": "variable initialization with constructor",
    "value": "$TYPE$ $NAME$ = new $TYPE$($PARAMS$);",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "PARAMS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "vari",
    "description": "variable initialization",
    "value": "$TYPE$ $NAME$ = $VALUE$;",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "varn",
    "description": "instance variable declaration",
    "value": "private $TYPE$ $NAME$;",
    "variables": [
      {
        "name": "TYPE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "NAME",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "vart",
    "description": "this assignment",
    "value": "this.$VAR1$ = $VAR2$;",
    "variables": [
      {
        "name": "VAR2",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VAR1",
        "expression": "",
        "default_value": "VAR2",
        "always_stop": true
      }
    ]
  },
  {
    "name": "ver",
    "description": "verify statement",
    "value": "org.mockito.Mockito.verify($VARIABLE$).$METHOD$;",
    "variables": [
      {
        "name": "VARIABLE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "METHOD",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "when",
    "description": "when statement",
    "value": "org.mockito.Mockito.when($VARIABLE$.$METHOD$($PARAMETERS$)).thenReturn($VALUE$);",
    "variables": [
      {
        "name": "VARIABLE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "METHOD",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "PARAMETERS",
        "expression": "",
        "default_value": "",
        "always_stop": true
      },
      {
        "name": "VALUE",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  },
  {
    "name": "while",
    "description": "while statement",
    "value": "while ($CONDITION$) {\n\t$END$\n}",
    "variables": [
      {
        "name": "CONDITION",
        "expression": "",
        "default_value": "",
        "always_stop": true
      }
    ]
  }
]
